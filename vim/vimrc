
" compare with list of options given by command ':options'

"------------------------------------------------------------------------------
"  1 important
"------------------------------------------------------------------------------
set nocompatible " make improved

let mapleader = ","

" load system local vimrc
if filereadable(expand('$HOME/.vimrc.local'))
    source $HOME/.vimrc.local
endif

autocmd vimenter * if !argc() | edit . | endif


set runtimepath+=~/.vim/vundle/vundle

" configure paste mode toggle on <leader>p
nnoremap <leader>p :set invpaste paste?<CR>

" load vundle
" use vundle for global bundles and pathogen for user installed bundles
" vundle dir: $HOME/.vim/vundle
" pathogen dir: $HOME/.vim/bundle
"
" Bundles are configured in ~/.vim/vundles.vim
filetype off
set secure
set exrc
set nosecure

call vundle#rc(expand('$HOME/.vim/vundle'))

source ~/.vim/vundles.vim
silent! call pathogen#infect()

filetype plugin indent on


"------------------------------------------------------------------------------
"  2 moving around, searching and patterns
"------------------------------------------------------------------------------
set whichwrap=b,s,<,>,[,]
set noautochdir

set incsearch
set magic
set ignorecase
set smartcase

" use python/perl like regex with search commands
nnoremap / /\v
vnoremap / /\v

" goto last visual select
nmap gV `[v`]


"------------------------------------------------------------------------------
"  3 tags
"------------------------------------------------------------------------------

" nnoremap <leader>g :tag

"------------------------------------------------------------------------------
"  4 displaying text
"------------------------------------------------------------------------------

" min number of line below/above current line
set scrolloff=3
set sidescroll=10

" do not wrap text if longer than display
set nowrap

set cmdheight=2

set nolazyredraw

set listchars=tab:▸\ ,eol:¬

nnoremap <silent> <C-x> :silent nohl<CR>	" press C-x to unhilte searches

"------------------------------------------------------------------------------
"  5 syntax, highlighting and spelling
"------------------------------------------------------------------------------
set background=dark
silent! colorscheme solarized

" filetype plugin indent on

syntax on                           " enable syntax highlighting

" highlight all patterns from last search
set hlsearch

set colorcolumn=80                      " highlight column 80

" show unwanted white spaces
highlight ShowTrailingWhitespace ctermbg=red guibg=red

"------------------------------------------------------------------------------
"  6 multiple windows
"------------------------------------------------------------------------------
set laststatus=2                        " show status line

" status line overwritten by airline
" " show modified status with file name (appends '+' to modified file name)
" function! ModifiedStr()
"     if (&modified)
"         return '+'
"     else
"         return ''
"     endif
" endfunction
" set statusline=%<%n:%f%{ModifiedStr()}\ %y\ %h%r[fo=%{&fo}][spell=%{&spell}]%=%-14.(%l,%c%V%)\ %P

set equalalways

set hidden

" shortcuts for moving cursor between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" use TAB to switch to last used buffer in normal mode
nmap <TAB> <C-^>
nnoremap <leader>w :vertical resize 

" use sbd to delete buffer without closing window
nnoremap <silent> <leader>d :Sbd<CR>


"------------------------------------------------------------------------------
"  7 multiple tab pages
"------------------------------------------------------------------------------

" better tab support:
"  - remember working directory per tab
"  - remember last used tab
function! s:enter_tab()
    if exists("t:wd")
        exec "cd" t:wd
    else
        let t:wd = getcwd()
    endif
endfunction

function! s:leave_tab()
    let t:wd = getcwd()
    let g:lasttab = tabpagenr()
endfunction

function! GotoLastTab()
    if exists("g:lasttab")
        exec "tabn ".g:lasttab
    endif
endfunction

augroup wd-per-tab
    autocmd!
    autocmd TabEnter * call s:enter_tab()
    autocmd TabLeave * call s:leave_tab()
augroup END

" move between tabs
nmap \1 1gt
nmap \2 2gt
nmap \3 3gt
nmap \4 4gt
nmap \5 5gt
nmap \6 6gt
nmap \7 7gt
nmap \8 8gt
nmap \9 9gt
nmap \0 :tablast<CR>
nmap \j gt
nmap \k gT
nmap \o :TabooOpen<SPACE>
nmap \r :TabooRename<SPACE>
nmap \d :tabclose<CR>

nmap \<TAB> :call GotoLastTab()<CR>

"------------------------------------------------------------------------------
"  8 terminal
"------------------------------------------------------------------------------

" configure appearance
if $TERM == "xterm-256color"
    set t_Co=256
endif

set ttyfast

"------------------------------------------------------------------------------
"  9 using the mouse
"------------------------------------------------------------------------------
set mouse=a
set nomousefocus

"------------------------------------------------------------------------------
" 10 GUI
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 11 printing
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 12 messages and info
"------------------------------------------------------------------------------
set showcmd
set showmode                            " show current mode
set ruler

set noerrorbells
" configure bells (turn off)
set visualbell
set t_vb=
set helplang=en

"------------------------------------------------------------------------------
" 13 selecting text
"------------------------------------------------------------------------------

" share system clipboard
set clipboard=unnamed

"------------------------------------------------------------------------------
" 14 editing text
"------------------------------------------------------------------------------
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

set textwidth=79

" allow backspacing in insert mode
set backspace=indent,eol,start

set formatoptions=crq

" show matching brackets when text indicator is over them
set showmatch

" test bubling with help of vim-unimpared (see:
" http://vimcasts.org/episodes/bubbling-text/)
" Bubble single lines (option + j/k)
nmap ˚ [e
nmap ∆ ]e
" " Bubble multiple lines
vmap ˚ [egv
vmap ∆ ]egv

"------------------------------------------------------------------------------
" 15 tabs and indenting
"------------------------------------------------------------------------------
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smartindent

set cinoptions+=:0,l1,p0,t0,+1s,(0,W1s          " configure C-like language indendation options

"------------------------------------------------------------------------------
" 16 folding
"------------------------------------------------------------------------------
set nofoldenable

" set fold method syntax, but off by default (toggle with 'zi')
let c_no_curly_error=1
set foldmethod=syntax

" configure ]z and [z to jump between open folds
function! GoToOpenFold(direction)
  let start = line('.')
  if (a:direction == "next")
    while (foldclosed(start) != -1)
      let start = start + 1
    endwhile
  else
    while (foldclosed(start) != -1)
      let start = start - 1
    endwhile
  endif
  call cursor(start, 0)
endfunction
nmap ]z :cal GoToOpenFold("next")<CR>
nmap [z :cal GoToOpenFold("prev")<CR>

"------------------------------------------------------------------------------
" 17 diff mode
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 18 mapping
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 19 reading and writing files
"------------------------------------------------------------------------------

set modelines=0                         " turn off modelines (prevents possible exploits)

if has("vms")
    set nobackup
else
    set backup
endif
set backupdir=~/.vim_backup

" automatically load file if changed outside vim
set autoread

if has("autocmd")
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif

" write file with sudo
cmap w!! w !sudo tee % >/dev/null

"------------------------------------------------------------------------------
" 20 the swap file
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 21 command line editing
"------------------------------------------------------------------------------

set history=1000

" show completion list in status bar on command-line completion
set wildmenu

" configure vim persist file undo
set undofile
set undodir=~/.vim_undo

"------------------------------------------------------------------------------
" 22 executing external commands
"------------------------------------------------------------------------------

if executable('par')
    set formatprg=par\ -req
endif

set warn


"------------------------------------------------------------------------------
" 23 running make and jumping to errors
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 24 language specific
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" 25 multi-byte characters
"------------------------------------------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set ffs=unix,dos,mac                    "Default file types

"------------------------------------------------------------------------------
" 26 various
"------------------------------------------------------------------------------

" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vim/vimrc

set gdefault " add 'g' to replace pattern s/.../.../ by default

set sessionoptions+=resize

set viminfo='1000,<50,s10,h

